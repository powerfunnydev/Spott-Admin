/* eslint-disable prefer-const */
import { destroy } from 'redux-form/immutable';
import * as api from '../api/pushNotification';
import { makeApiActionCreator } from './utils';

export const CREATE_PUSH_NOTIFICATION_START_WIZARD = 'CREATE_PUSH_NOTIFICATION_START_WIZARD';
export const CREATE_PUSH_NOTIFICATION_SELECT_TAB = 'CREATE_PUSH_NOTIFICATION_SELECT_TAB';
export const CREATE_PUSH_NOTIFICATION_SELECT_PUSH_NOTIFICATION_TYPE = 'CREATE_PUSH_NOTIFICATION_SELECT_PUSH_NOTIFICATION_TYPE';
export const CREATE_PUSH_NOTIFICATION_CANCEL_WIZARD = 'CREATE_PUSH_NOTIFICATION_CANCEL_WIZARD';

export const CREATE_PUSH_NOTIFICATION_START = 'PUSH_NOTIFICATION/CREATE_PUSH_NOTIFICATION_START';
export const CREATE_PUSH_NOTIFICATION_SUCCESS = 'PUSH_NOTIFICATION/CREATE_PUSH_NOTIFICATION_SUCCESS';
export const CREATE_PUSH_NOTIFICATION_ERROR = 'PUSH_NOTIFICATION/CREATE_PUSH_NOTIFICATION_ERROR';

export const PROCESS_PUSH_NOTIFICATION_START = 'PUSH_NOTIFICATION/PROCESS_PUSH_NOTIFICATION_START';
export const PROCESS_PUSH_NOTIFICATION_SUCCESS = 'PUSH_NOTIFICATION/PROCESS_PUSH_NOTIFICATION_SUCCESS';
export const PROCESS_PUSH_NOTIFICATION_ERROR = 'PUSH_NOTIFICATION/PROCESS_PUSH_NOTIFICATION_ERROR';

export const PUSH_NOTIFICATION_DELETE_START = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_DELETE_START';
export const PUSH_NOTIFICATION_DELETE_SUCCESS = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_DELETE_START';
export const PUSH_NOTIFICATION_DELETE_ERROR = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_DELETE_START';

export const PUSH_NOTIFICATIONS_DELETE_START = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_DELETE_START';
export const PUSH_NOTIFICATIONS_DELETE_SUCCESS = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_DELETE_SUCCESS';
export const PUSH_NOTIFICATIONS_DELETE_ERROR = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_DELETE_ERROR';

export const UPLOAD_FILE_START = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_UPLOAD_FILE_START';
export const UPLOAD_FILE_SUCCESS = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_UPLOAD_FILE_SUCCESS';
export const UPLOAD_FILE_ERROR = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_UPLOAD_FILE_ERROR';
export const UPLOAD_FILE_PROGRESS = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_UPLOAD_FILE_PROGRESS';

export const PUSH_NOTIFICATION_SEARCH_START = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_SEARCH_START';
export const PUSH_NOTIFICATION_SEARCH_SUCCESS = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_SEARCH_SUCCESS';
export const PUSH_NOTIFICATION_SEARCH_ERROR = 'PUSH_NOTIFICATION/PUSH_NOTIFICATION_SEARCH_ERROR';

export const DELETE_PROFILE_IMAGE_START = 'PUSH_NOTIFICATION/DELETE_PROFILE_IMAGE_START';
export const DELETE_PROFILE_IMAGE_SUCCESS = 'PUSH_NOTIFICATION/DELETE_PROFILE_IMAGE_SUCCESS';
export const DELETE_PROFILE_IMAGE_ERROR = 'PUSH_NOTIFICATION/DELETE_PROFILE_IMAGE_ERROR';

export const DELETE_POSTER_IMAGE_START = 'PUSH_NOTIFICATION/DELETE_POSTER_IMAGE_START';
export const DELETE_POSTER_IMAGE_SUCCESS = 'PUSH_NOTIFICATION/DELETE_POSTER_IMAGE_SUCCESS';
export const DELETE_POSTER_IMAGE_ERROR = 'PUSH_NOTIFICATION/DELETE_POSTER_IMAGE_ERROR';

export const DELETE_ROUND_LOGO_START = 'PUSH_NOTIFICATION/DELETE_ROUND_LOGO_START';
export const DELETE_ROUND_LOGO_SUCCESS = 'PUSH_NOTIFICATION/DELETE_ROUND_LOGO_SUCCESS';
export const DELETE_ROUND_LOGO_ERROR = 'PUSH_NOTIFICATION/DELETE_ROUND_LOGO_ERROR';

export const TV_GUIDE_ENTRIES_FETCH_START = 'PUSH_NOTIFICATION/TV_GUIDE_ENTRIES_FETCH_START';
export const TV_GUIDE_ENTRIES_FETCH_SUCCESS = 'PUSH_NOTIFICATION/TV_GUIDE_ENTRIES_FETCH_SUCCESS';
export const TV_GUIDE_ENTRIES_FETCH_ERROR = 'PUSH_NOTIFICATION/TV_GUIDE_ENTRIES_FETCH_ERROR';

export const PUSH_NOTIFICATIONS_FETCH_START = 'PUSH_NOTIFICATION/PUSH_NOTIFICATIONS_FETCH_START';
export const PUSH_NOTIFICATIONS_FETCH_SUCCESS = 'PUSH_NOTIFICATION/PUSH_NOTIFICATIONS_FETCH_SUCCESS';
export const PUSH_NOTIFICATIONS_FETCH_ERROR = 'PUSH_NOTIFICATION/PUSH_NOTIFICATIONS_FETCH_ERROR';

// export const fetchTvGuideEntries = makeApiActionCreator(api.fetchTvGuideEntries, TV_GUIDE_ENTRIES_FETCH_START, TV_GUIDE_ENTRIES_FETCH_SUCCESS, TV_GUIDE_ENTRIES_FETCH_ERROR);
export const fetchPushNotifications = makeApiActionCreator(api.fetchPushNotifications, PUSH_NOTIFICATIONS_FETCH_START, PUSH_NOTIFICATIONS_FETCH_SUCCESS, PUSH_NOTIFICATIONS_FETCH_START);
// export const searchPushNotifications = makeApiActionCreator(api.searchPushNotifications, PUSH_NOTIFICATION_SEARCH_START, PUSH_NOTIFICATION_SEARCH_SUCCESS, PUSH_NOTIFICATION_SEARCH_ERROR);
export const deletePushNotifications = makeApiActionCreator(api.deletePushNotifications, PUSH_NOTIFICATIONS_DELETE_START, PUSH_NOTIFICATIONS_DELETE_SUCCESS, PUSH_NOTIFICATIONS_DELETE_ERROR);
export const deletePushNotification = makeApiActionCreator(api.deletePushNotification, PUSH_NOTIFICATION_DELETE_START, PUSH_NOTIFICATION_DELETE_SUCCESS, PUSH_NOTIFICATION_DELETE_ERROR);
/* export const deleteProfileImage = makeApiActionCreator(api.deleteProfileImage, DELETE_PROFILE_IMAGE_START, DELETE_PROFILE_IMAGE_SUCCESS, DELETE_PROFILE_IMAGE_ERROR);
export const deletePosterImage = makeApiActionCreator(api.deletePosterImage, DELETE_POSTER_IMAGE_START, DELETE_POSTER_IMAGE_SUCCESS, DELETE_POSTER_IMAGE_ERROR);
export const deleteRoundLogo = makeApiActionCreator(api.deleteRoundLogo, DELETE_ROUND_LOGO_START, DELETE_ROUND_LOGO_SUCCESS, DELETE_ROUND_LOGO_ERROR); */

/**
 * Opens the create push notification modal with video upload etc.
 * @return {Object} The action
 */
export function startWizard () {
  return { type: CREATE_PUSH_NOTIFICATION_START_WIZARD };
}

/**
 * Close the create push notification modal, reset the form.
 * @return {Object} The action
 */
export function cancelWizard () {
  return async (dispatch) => {
    dispatch({ type: CREATE_PUSH_NOTIFICATION_CANCEL_WIZARD });
    dispatch(destroy('createMedia'));
  };
}

/**
 * Select a tab in the create push notification modal.
 * @param {string} tab The name of the tab that is selected (e.g, 'description')
 * @return {string} The action
 */
export function selectTab (tab) {
  return { tab, type: CREATE_PUSH_NOTIFICATION_SELECT_TAB };
}

/**
 * Select a push notification type in the description tab of the create push notification modal.
 * @param {string} pushNotificationType The push notification type of the video which we want to upload (e.g, 'movie')
 * @return {string} The action
 */
export function selectPushNotificationType (pushNotificationType) {
  return { pushNotificationType, type: CREATE_PUSH_NOTIFICATION_SELECT_PUSH_NOTIFICATION_TYPE };
}
